import os

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.utils.formatting import Bold, Text

BOT_TOKEN = os.getenv('TG_BOT_TOKEN')

hello_text = ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç <strong>–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</strong>,'
              ' —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–≤–æ–Ω–æ–∫ –º–∞—Å—Ç–µ—Ä–∞')

about_text = '–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É - –ú–æ—Å–∫–≤–∞, –Ω–∞—à —Å–∞–π—Ç - https://www.test.ru'

# TODO: –°–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞, –∫—Ä—á –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏

# TODO: –ü–æ –∑–∞–ø—Ä–æ—Å—É –ê–ª–µ–∫—Å–µ—è, –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º (–µ—â–µ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ)
#  –∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤—ã—á–∏—Å–ª—è—Ç—å –ø–∏–¥–æ—Ä–∞ (–≤–æ—Ç —Ç–µ–±–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏).

"""
—Ç–æ–ø html —Ä–∞–∑–º–µ—Ç–æ–∫

1. <p> ‚Äî –ø–∞—Ä–∞–≥—Ä–∞—Ñ.
2. <h1> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.
3. <h2> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è.
4. <h3> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è.
5. <h4> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.
6. <h5> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—è—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.
7. <h6> ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–µ—Å—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.
8. <br> ‚Äî –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
9. <strong> ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º.
10. <em> ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–æ–º.
11. <img> ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
12. <a> ‚Äî –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞.
13. <ul> ‚Äî –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
14. <ol> ‚Äî –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
15. <li> ‚Äî —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.
16. <div> ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
17. <span> ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.
18. <table> ‚Äî —Ç–∞–±–ª–∏—Ü–∞.
19. <tr> ‚Äî —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.
20. <td> ‚Äî —è—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã.
"""

"""

–°–≤–æ–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è:

–£ –Ω–∞—Å –µ—Å—Ç—å –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã

–£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è


–†–∞–∑–±–µ—Ä–µ–º –ø—Ä–∏–º–µ—Ä–æ–º

@dp.message(Command(commands=["start"]))  - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É "/start
async def process_start_command(message: Message):
    await message.answer(  - —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        f'–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –≠—Ö–æ-–±–æ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å\n\n\n{message.model_dump_json(indent=4, 
        exclude_none=True)}')
        
        
    –µ—Å—Ç—å answer - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    –∞ –µ—Å—Ç—å reply - —ç—Ç–æ —É–∂–µ *–æ—Ç–≤–µ—Ç*

"""

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=BOT_TOKEN)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)
dp = Dispatcher()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    await message.answer(hello_text)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
@dp.message(Command(commands=['about']))
async def process_about_command(message: Message):
    await message.answer(about_text)


# –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

@dp.message(Command(commands='get_id'))
async def process_get_id_command(message: Message):
    await message.answer(f'ID: {message.chat.id}')


@dp.message(Command(commands="hello"))
async def process_hello_command(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')


@dp.message(Command(commands='format'))
async def process_f_answer_command(message: Message,
                                   command: CommandObject):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    text = command.args
    #await message.reply(f'–í–∞—à —Ç–µ–∫—Å—Ç - {text}\n')

    content = Text(
        "–í–∞—à —Ç–µ–∫—Å—Ç - \n, ",
        Bold(text)
    )
    await message.reply(
        **content.as_kwargs()
    )


@dp.message(Command("settimer"))
async def cmd_settimer(
        message: Message,
        command: CommandObject
):
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —Ç–æ
    # command.args –±—É–¥–µ—Ç None
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –≤—ã–ª–µ—Ç–∏—Ç ValueError
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/settimer <time> <message>"
        )
        return
    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"–í—Ä–µ–º—è: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
    )


@dp.message(Command('dice'))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message(Command('stats'))
async def cmd_stats(message: types.Message):
    await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {message.chat.id}\n'
                         f'{message.chat.username}\n'
                         f'{message.chat.first_name}\n'
                         f'{message.chat.last_name}\n'
                         f'–ü—Ä–µ–º–∏—É–º {message.from_user.is_premium}')


@dp.message()
async def send_echo(message: Message):
    await message.reply(text=message.text)


if __name__ == '__main__':
    dp.run_polling(bot)
